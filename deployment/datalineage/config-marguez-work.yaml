apiVersion: v1
kind: ConfigMap
metadata:
    name: init-scripts
data:
    init-db.sh: |
        #!/bin/bash
        # Your original init-db.sh content
        echo "Running init-db script..."
        #
        # Copyright 2018-2023 contributors to the Marquez project
        # SPDX-License-Identifier: Apache-2.0
        #
        # Usage: $ ./init-db.sh

        set -eu

        psql -v ON_ERROR_STOP=1 --username "${POSTGRES_USER}" > /dev/null <<-EOSQL
          CREATE USER ${AIRFLOW_USER};
          ALTER USER ${AIRFLOW_USER} WITH PASSWORD '${AIRFLOW_PASSWORD}';
          CREATE DATABASE ${AIRFLOW_DB};
          GRANT ALL PRIVILEGES ON DATABASE ${AIRFLOW_DB} TO ${AIRFLOW_USER};
          CREATE USER ${MARQUEZ_USER};
          ALTER USER ${MARQUEZ_USER} WITH PASSWORD '${MARQUEZ_PASSWORD}';
          CREATE DATABASE ${MARQUEZ_DB};
          GRANT ALL PRIVILEGES ON DATABASE ${MARQUEZ_DB} TO ${MARQUEZ_USER};
          CREATE USER ${EXAMPLE_USER};
          ALTER USER ${EXAMPLE_USER} WITH PASSWORD '${EXAMPLE_PASSWORD}';
          CREATE DATABASE ${EXAMPLE_DB};
          GRANT ALL PRIVILEGES ON DATABASE ${EXAMPLE_DB} TO ${EXAMPLE_USER};
        EOSQL

    wait-for-it.sh: |
        #!/usr/bin/env bash
        #   Use this script to test if a given TCP host/port are available

        set -e

        HOST="$1"
        shift
        CMD="$@"

        if [ -z "$HOST" ] || [ -z "$CMD" ]; then
          echo "Usage: $0 host:port -- command args"
          exit 1
        fi

        HOSTNAME=$(echo "$HOST" | cut -d : -f 1)
        PORT=$(echo "$HOST" | cut -d : -f 2)

        echo "Waiting for $HOSTNAME:$PORT to be available..."

        while ! nc -z "$HOSTNAME" "$PORT"; do
          sleep 1
        done

        echo "$HOSTNAME:$PORT is available. Executing command..."
        exec $CMD
